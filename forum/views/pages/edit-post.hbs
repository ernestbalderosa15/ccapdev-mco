<div class="post edit-post-form">
    <div class="back-link">
        <a href="/post/{{post._id}}" class="btn-icon"><span class="material-icons">arrow_back</span> Back</a>
    </div>
    <h2 class="post-title">Edit Post</h2>
    <div id="error-message" style="color: red;"></div>
    <form id="post-form">
        <div class="form-group">
            <label for="post-title">Title</label>
            <input type="text" id="post-title" name="title" class="form-input" value="{{post.title}}" required>
        </div>
        <div class="form-group">
            <label for="editor">Content</label>
            <textarea id="editor" name="content">{{{post.content}}}</textarea>
        </div>
        <div class="form-group">
            <label for="post-tags">Tags</label>
            <div class="tag-input-container">
                <input type="text" id="post-tags" name="tags" class="form-input" placeholder="Enter tags and press Enter">
                <div id="tags-container" class="tags-list">
                    {{#each post.tags}}
                    <span class="tag">{{this}} <span class="material-icons">close</span></span>
                    {{/each}}
                </div>
            </div>
        </div>
        <div class="form-actions">
            <button type="submit" class="btn-primary">
                <span class="material-icons">save</span> Update Post
            </button>
        </div>
    </form>
</div>
<script src="https://cdn.ckeditor.com/ckeditor5/27.1.0/classic/ckeditor.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    let editor;
    const tags = new Set({{json post.tags}});

    ClassicEditor
        .create(document.querySelector('#editor'), {
            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote'],
        })
        .then(newEditor => {
            editor = newEditor;
        })
        .catch(error => {
            console.error('CKEditor initialization error:', error);
        });

    const tagInput = document.getElementById('post-tags');
    const tagsContainer = document.getElementById('tags-container');

    // Initialize tags
    tags.forEach(tag => addTag(tag));

    tagInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const tag = this.value.trim();
            if (tag && !tags.has(tag)) {
                addTag(tag);
                this.value = '';
            }
        }
    });

    function addTag(tag) {
        tags.add(tag);
        const tagElement = document.createElement('span');
        tagElement.classList.add('tag');
        tagElement.innerHTML = `${tag} <span class="material-icons">close</span>`;
        tagElement.querySelector('.material-icons').addEventListener('click', function() {
            tags.delete(tag);
            tagElement.remove();
        });
        tagsContainer.appendChild(tagElement);
    }

    document.getElementById('post-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const title = document.getElementById('post-title').value;
        const content = editor.getData();
        const tagArray = Array.from(tags);
        
        const data = {
            title: title,
            content: content,
            tags: tagArray
        };
        
        fetch('/edit-post/{{post._id}}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                throw new Error(data.error);
            }
            // Redirect to the updated post page
            window.location.href = '/post/' + data._id;
        })
        .catch((error) => {
            console.error('Error:', error);
            document.getElementById('error-message').textContent = 'Error: ' + error.message;
        });
    });
});
</script>