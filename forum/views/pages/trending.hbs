{{!-- views/pages/trending.hbs --}}

<script>
window.handleImageError = function(img) {
    console.error('Failed to load image:', img.src);
    img.src = '/images/default-avatar.jpg';
    console.log('Fallback image set');
};
</script>

<div id="posts-container">
    {{#each posts}}
<article class="post" data-post-id="{{this._id}}" data-vote-score="{{subtract this.upvotes.length this.downvotes.length}}" data-created-at="{{this.createdAt}}">
            <div class="post-header">
            <div class="post-user">
                <img src="{{user.profilePicture}}" alt="{{user.username}}" class="avatar small" onerror="handleImageError(this)">
                <span class="username">{{this.user.username}}</span>
                <span class="time">{{formatDate this.createdAt}}</span>
            </div>
        </div>
        <h2 class="post-title"><a href="/post/{{this._id}}">{{this.title}}</a></h2>
        <div class="post-content-preview">
            {{{truncateHtml this.content 150}}}
        </div>
        {{#if this.image}}
        <img src="{{this.image}}" alt="Post image" class="post-image">
        {{/if}}
        <div class="post-tags">
            {{#each this.tags}}
            <a href="/search?tag={{this}}" class="tag">{{this}}</a>
            {{/each}}
        </div>
<div class="post-stats">
    <div class="post-stats-left">
        <button class="btn-icon upvote-btn {{#if (eq this.userVote 'upvote')}}active{{/if}}" data-post-id="{{this._id}}">
            <span class="material-icons">arrow_upward</span> 
            <span class="upvote-count">{{this.upvotes.length}}</span>
        </button>
        <button class="btn-icon downvote-btn {{#if (eq this.userVote 'downvote')}}active{{/if}}" data-post-id="{{this._id}}">
            <span class="material-icons">arrow_downward</span>
        </button>
        <button class="btn-icon">
            <span class="material-icons">comment</span> 
            {{this.comments.length}}
        </button>
    </div>
    <div class="post-stats-right">
        <button class="btn-icon bookmark-btn {{#if this.isBookmarked}}active{{/if}}" data-post-id="{{this._id}}">
            <span class="material-icons">{{#if this.isBookmarked}}bookmark{{else}}bookmark_border{{/if}}</span>
        </button>
        <button class="btn-icon share-btn" data-post-id="{{this._id}}">
            <span class="material-icons">share</span>
        </button>
    </div>
</div>
    </article>
    {{/each}}
</div>

{{#if isLoggedIn}}
<div id="loading" style="display: none;">Loading more posts...</div>
{{/if}}

<script>
document.addEventListener('DOMContentLoaded', function() {
    const isLoggedIn = {{#if user}}true{{else}}false{{/if}};
    window.isLoggedIn = isLoggedIn; // Make it globally accessible   
    let loading = false;

    // Add click event listeners to post containers
    const postTitles = document.querySelectorAll('.post-title a');
    postTitles.forEach(title => {
        title.addEventListener('click', function(e) {
            e.preventDefault();
            const postId = this.closest('.post').getAttribute('data-post-id');
            window.location.href = `/post/${postId}`;
        });
    });

    function loadMorePosts() {
        if (loading) return;
        loading = true;
        document.getElementById('loading').style.display = 'block';

        fetch(`/api/trending?page=${page + 1}`)
            .then(response => response.json())
            .then(newPosts => {
                if (newPosts.length > 0) {
                    const container = document.getElementById('posts-container');
                    newPosts.forEach(post => {
                        const postElement = document.createElement('article');
                        postElement.className = 'post';
                        postElement.setAttribute('data-post-id', post._id);
                        postElement.innerHTML = `
                            <div class="post-header">
                                <div class="post-user">
                                    <img src="${post.user.avatar}" alt="${post.user.username}" class="avatar small">
                                    <span class="username">${post.user.username}</span>
                                    <span class="time">${new Date(post.createdAt).toLocaleString()}</span>
                                </div>
                            </div>
                            <h2 class="post-title">${post.title}</h2>
                            <div class="post-content-preview">
                                ${post.content.substring(0, 150)}...
                            </div>
                            ${post.image ? `<img src="${post.image}" alt="Post image" class="post-image">` : ''}
                            <div class="post-stats">
                                <span>Upvotes: ${post.upvotes.length}</span>
                                <span>Comments: ${post.comments.length}</span>
                            </div>
                        `;
                        container.appendChild(postElement);
                        
                        // Add click event listener to the new post
                        postElement.addEventListener('click', function(e) {
                            if (!e.target.closest('button')) {
                                window.location.href = `/post/${post._id}`;
                            }
                        });
                    });
                    page++;
                }
                loading = false;
                document.getElementById('loading').style.display = 'none';
            })
            .catch(error => {
                console.error('Error:', error);
                loading = false;
                document.getElementById('loading').style.display = 'none';
            });
    }

    if (isLoggedIn) {
        window.addEventListener('scroll', () => {
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 500) {
                loadMorePosts();
            }
        });
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const postsContainer = document.getElementById('posts-container');

    function updatePostPosition(postId, newVoteCount) {
        const postElement = document.querySelector(`[data-post-id="${postId}"]`);
        if (!postElement) return;

        postElement.setAttribute('data-vote-score', newVoteCount);
        
        const posts = Array.from(postsContainer.children);
        posts.sort((a, b) => {
            return b.getAttribute('data-vote-score') - a.getAttribute('data-vote-score');
        });

        posts.forEach(post => postsContainer.appendChild(post));
    }

    function handleVote(postId, voteType) {
        fetch(`/post/${postId}/${voteType}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                const postElement = document.querySelector(`[data-post-id="${postId}"]`);
                const upvoteCount = postElement.querySelector('.upvote-count');
                upvoteCount.textContent = data.upvotes;

                const newVoteScore = data.upvotes - data.downvotes;
                updatePostPosition(postId, newVoteScore);
            })
            .catch(error => console.error('Error:', error));
    }

    postsContainer.addEventListener('click', function(event) {
        const voteBtn = event.target.closest('.upvote-btn, .downvote-btn');
        if (voteBtn) {
            const postId = voteBtn.dataset.postId;
            const voteType = voteBtn.classList.contains('upvote-btn') ? 'upvote' : 'downvote';
            handleVote(postId, voteType);
        }
    });
});
</script>