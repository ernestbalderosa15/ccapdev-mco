{{!-- pages/create-post.hbs --}}

<div class="post create-post-form">
    <div class="back-link">
        <a href="/" class="btn-icon"><span class="material-icons">arrow_back</span> Back</a>
    </div>
    <h2 class="post-title">Create a Post</h2>
    <div id="error-message" style="color: red;"></div>
    <form id="post-form">
        <div class="form-group">
            <label for="post-title">Title</label>
            <input type="text" id="post-title" name="title" class="form-input" required>
        </div>
        <div class="form-group">
            <label for="editor">Description</label>
            <textarea id="editor" name="content"></textarea>
        </div>
        <div class="form-group">
            <label for="post-tags">Tags</label>
            <div class="tag-input-container">
                <input type="text" id="post-tags" name="tags" class="form-input" placeholder="Enter tags and press Enter">
                <div id="tags-container" class="tags-list"></div>
            </div>
        </div>
        <div class="form-actions">
            <button type="submit" class="btn-primary">
                <span class="material-icons">send</span> Submit Post
            </button>
        </div>
    </form>
</div>

<script src="https://cdn.ckeditor.com/ckeditor5/27.1.0/classic/ckeditor.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    let editor;
    const tags = new Set();
    let isEditorReady = false;
    const submitButton = document.querySelector('#post-form button[type="submit"]');
    
    // Disable submit button initially
    submitButton.disabled = true;

    class MyUploadAdapter {
        constructor(loader) {
            this.loader = loader;
        }

        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    const data = new FormData();
                    data.append('upload', file);

                    fetch('/upload-image', {
                        method: 'POST',
                        body: data
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.uploaded) {
                            resolve({ default: result.url });
                        } else {
                            reject(result.error.message);
                        }
                    })
                    .catch(error => {
                        reject('Upload failed');
                        console.error('Error:', error);
                    });
                }));
        }

        abort() {
            // Abort the upload process if needed
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#editor'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'imageUpload'],
            link: {
                decorators: {
                    openInNewTab: {
                        mode: 'manual',
                        label: 'Open in a new tab',
                        defaultValue: true,
                        attributes: {
                            target: '_blank',
                            rel: 'noopener noreferrer'
                        }
                    }
                }
            },
            image: {
                toolbar: ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
                styles: [
                    'full',
                    'alignLeft',
                    'alignRight',
                ]
            }
        })
        .then(newEditor => {
            editor = newEditor;
            isEditorReady = true;
            submitButton.disabled = false; // Enable submit button when editor is ready
        })
        .catch(error => {
            console.error('CKEditor initialization error:', error);
            document.getElementById('error-message').textContent = 'Error initializing editor. Please try refreshing the page.';
        });


    const tagInput = document.getElementById('post-tags');
    const tagsContainer = document.getElementById('tags-container');

    tagInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const tag = this.value.trim();
            if (tag && !tags.has(tag)) {
                addTag(tag);
                this.value = '';
            }
        }
    });

    function addTag(tag) {
        tags.add(tag);
        const tagElement = document.createElement('span');
        tagElement.classList.add('tag');
        tagElement.innerHTML = `${tag} <span class="material-icons">close</span>`;
        tagElement.querySelector('.material-icons').addEventListener('click', function() {
            tags.delete(tag);
            tagElement.remove();
        });
        tagsContainer.appendChild(tagElement);
    }

    document.getElementById('post-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!isEditorReady) {
            document.getElementById('error-message').textContent = 'Editor is not ready. Please wait and try again.';
            return;
        }
        
        const title = document.getElementById('post-title').value;
        const content = editor.getData(); // This should now be safe to call
        const tagArray = Array.from(tags);
        
        const data = {
            title: title,
            content: content,
            tags: tagArray
        };
        
        fetch('/create-post', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                throw new Error(data.error);
            }
            // Redirect to the new post page
            window.location.href = '/post/' + data._id;
        })
        .catch((error) => {
            console.error('Error:', error);
            document.getElementById('error-message').textContent = 'Error: ' + error.message;
        });
    });
});
</script>